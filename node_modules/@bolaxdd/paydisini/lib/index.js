import axios from "axios";
import FormData from "form-data";
import md5 from "crypto-js/md5.js";
import { join } from "path";

/**
 * Pay Disini (Payment gateway free)
 * Code base: https://github.com/bolaxd
 * Don't claim this code without License
 */

export class PayDisini {
    /**
     * Paydisini is a payment gateway free to use (register with your passport)
     * @param {string} [key] This class has one parameter, namely "key"
     */
    constructor(key) {
        this.url = "https://paydisini.co.id/api/";
        this.method = "post";
        this.key = key;
    }

    async _request(request, payloads = {}) {
        const signValue = {
            profile: `Profile`,
            new: `${
                payloads["unique_code"] +
                payloads["service"] +
                payloads["amount"] +
                payloads["valid_time"]
            }NewTransaction`,
            status: `${payloads["unique_code"]}StatusTransaction`,
            cancel: `${payloads["unique_code"]}CancelTransaction`,
            payment_channel: `PaymentChannel`,
            payment_guide: `${payloads["service"]}PaymentGuide`
        };
        const formData = new FormData();
        payloads.signature = md5(this.key + signValue[request]).toString();
        payloads.key = this.key;
        payloads.request = request;
        for (let index in payloads) {
            if (payloads[index]) await formData.append(index, payloads[index]);
        }
        const res = await axios[this.method](this.url, formData)
            .then(res => res.data)
            .catch(e => ({ success: false, msg: "Maaf server sedang error" }));
        return res;
    }

    profile() {
        return this._request("profile");
    }

    newTransaction({
        merchant_id,
        unique_code,
        service,
        amount,
        note,
        valid_time,
        payment_guide,
        ewallet_phone,
        customer_email,
        type_fee,
        callback_count,
        return_url
    }) {
        return this._request("new", {
            merchant_id,
            unique_code,
            service,
            amount,
            note,
            valid_time,
            payment_guide,
            ewallet_phone,
            customer_email,
            type_fee,
            callback_count,
            return_url
        });
    }
    statusTransaction(unique_code) {
        return this._request("status", { unique_code });
    }

    cancelTransaction(unique_code) {
        return this._request("cancel", { unique_code });
    }

    paymentChannel() {
        return this._request("payment_channel");
    }

    async paymentGuide(service) {
        const res = await this._request("payment_guide", { service });
        if (res.success) {
            return {
                channel_pembayaran: res.channel_pembayaran,
                data: res.data.map(({ title, content }) => ({
                    title,
                    content:
                        "- " +
                        content
                            .split("</li><li>")
                            .join("\n- ")
                            .replace(/([<>/]|li|ol)/g, "")
                }))
            };
        }
    }
}

export default PayDisini;
